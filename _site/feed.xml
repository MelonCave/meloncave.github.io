<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Salebarn</title>
    <description>SALEBARN is about DISTRIBUTED FREEDOM. We extend FREE and accelerated discovery and negotiation technology to provide greater transparency, value, information from FREE and open markets.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 04 Jan 2017 13:10:53 -0600</pubDate>
    <lastBuildDate>Wed, 04 Jan 2017 13:10:53 -0600</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>The FULL significance of the 12 Factor App mindset</title>
        <description>&lt;h1 id=&quot;twelve-factor-appshttp12factornet-have-become-absolutely-necessary-in-the-softare-as-a-service-realm--but-there-is-a-lucky-13th-factor-that-is-essential-for-new-work&quot;&gt;&lt;a href=&quot;http://12factor.net/&quot;&gt;Twelve Factor apps&lt;/a&gt; have become absolutely NECESSARY in the softare-as-a-service realm … but there is a LUCKY 13th factor that is essential for NEW work.&lt;/h1&gt;
&lt;p&gt;The twelve factors given below are not goals; they are requirements.  If we cannot meet the &lt;a href=&quot;http://12factor.net/&quot;&gt;twelve factor&lt;/a&gt; requirements, we should not pollute the world with our careless, reckless, ill-conceived app.  The &lt;a href=&quot;http://12factor.net/&quot;&gt;twelve factor&lt;/a&gt; format is inspired by Martin Fowler’s books &lt;a href=&quot;https://www.safaribooksonline.com/library/view/patterns-of-enterprise/0321127420/&quot;&gt;Patterns of Enterprise Application Architecture and Refactoring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But the 12 factors need to reconcieved, to enable a more secure, reliable, scalable, survivable system … fundamentally, this means that the back-end must be radically more decentralized and distributed … the MOST necessary thing about an app happens BEFORE you start PRACTICING WRITING CODE for a new product … BEFORE YOU START monkeying around with code, before you start thinking about architecture, it is important to not just conceive of a new [incrementally-better] product [because that’s what you will do AFTER you have a new product] … the first thing that you must do is reconceive the customers for a new emergent product … the process of becoming [something more], becoming emergent must be and can be continually created, re-created, reconceived.&lt;/p&gt;

&lt;p&gt;This means moving from an “Application Platform-as-a-Service” to a “Container Platform-as-a-Service” to in order to enable &lt;a href=&quot;https://github.com/cockroachdb/cockroach#design&quot;&gt;a more highly distributed SQL database with support for ACID transactions, horizontal scalability and survivability&lt;/a&gt;.  The ultimate intent is a radically more diffuse, distributed, decentralized transaction database using blockchain architecture.  In highly distributed systems [like bitcoin], suspicion, pessimism and paranoia are used as architecture requirements to build highly reliable systems from extremely unreliable, untrustworthy components … which is possible by focusing on the most core elements of a transaction and assuming throughout the design process that all nodes and channels of the network, as well as all bots or participants that might use the system are untrustworthy even potentially malicious.&lt;/p&gt;

&lt;p&gt;But the 12 Factor App mindset STILL matters … let’s look at WHY.&lt;/p&gt;

&lt;h2 id=&quot;i-version-controlled-codebase--blog&quot;&gt;I. Version-Controlled Codebase / Blog&lt;/h2&gt;
&lt;p&gt;There can be many deployments, but a twelve-factor app is ALWAYS tracked in a version control system, such as Git, Mercurial, or Subversion. ALWAYS! ALWAYS! ALWAYS!  And “ALWAYS!” means that it necessary to center an workflow around the code repositories in version control system … for example, meetings should not be physical, but instead be conducted via repository-centric chat with archived transcripts.&lt;/p&gt;

&lt;h2 id=&quot;ii-dependencies&quot;&gt;II. Dependencies&lt;/h2&gt;
&lt;p&gt;A twelve-factor app never relies on implicit existence of system-wide packages. It declares all dependencies, completely and exactly, via a dependency declaration manifest.  &lt;em&gt;One word … CoreOS ETCD … ok, two words … but it applies to the next factor, Config as well.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;iii-config&quot;&gt;III. Config&lt;/h2&gt;
&lt;p&gt;The twelve-factor app stores config in environment variables (often shortened to env vars or env). Env vars are easy to change between deploys without changing any code; unlike config files, there is little chance of them being checked into the code repo accidentally. In a twelve-factor app, env vars are granular controls, each fully orthogonal to other env vars. They are never grouped together as “environments”, but instead are independently managed for each deploy.&lt;/p&gt;

&lt;h2 id=&quot;iv-backing-services&quot;&gt;IV. Backing Services&lt;/h2&gt;
&lt;p&gt;A backing service is any service the app consumes over the network as part of its normal operation. Examples include datastores (such as MySQL or CouchDB), messaging/queueing systems (such as RabbitMQ or Beanstalkd), SMTP services for outbound email (such as Postfix), and caching systems (such as Memcached). The code for a twelve-factor app made no distinction between local and third party services. To the app, both are attached resources, accessed via a URL or other locator/credentials stored in the config … but our new architecture requirements will force to build highly reliable backing service systems from extremely unreliable, untrustworthy components.&lt;/p&gt;

&lt;h2 id=&quot;v-build-release-run&quot;&gt;V. Build, release, run&lt;/h2&gt;
&lt;p&gt;The twelve-factor app uses strict separation between the build, release, and run stages. Every release should always have a unique release ID, such as a timestamp of the release (such as 2011-04-06-20:32:17) or an incrementing number (such as v100). Releases are an append-only ledger and a release cannot be mutated once it is created. Any change MUST create a new release.&lt;/p&gt;

&lt;h2 id=&quot;vi-processes&quot;&gt;VI. Processes&lt;/h2&gt;
&lt;p&gt;Twelve-factor processes are necessarily stateless and must be constructed so that they don’t persist and share almost nothing. The rare data that needs to persist must be stored in a stateful backing service, typically a highly-distributed database system. The memory space or filesystem of the process should be used as a momentarily brief, single-transaction cache pulling from a &lt;em&gt;Cockroach-ey&lt;/em&gt; database system with support for ACID transactions, horizontal scalability and survivability](https://github.com/cockroachdb/cockroach#design).&lt;/p&gt;

&lt;h2 id=&quot;vii-port-binding&quot;&gt;VII. Port binding&lt;/h2&gt;
&lt;p&gt;The twelve-factor app is completely self-contained and does not rely on runtime injection of a webserver into the execution environment to create a web-facing service. Typically, the web app exports HTTP as a service by binding to a port, and listening to requests coming in on that port. HTTP is not the only service that can be exported by port binding. Nearly any kind of server software can be run via a process binding to a port and awaiting incoming requests. Examples include ejabberd (speaking XMPP), and Redis (speaking the Redis protocol).&lt;/p&gt;

&lt;h2 id=&quot;viii-concurrency&quot;&gt;VIII. Concurrency&lt;/h2&gt;
&lt;p&gt;In the twelve-factor app, processes are a first class citizen. Processes in the twelve-factor app take strong cues from the &lt;a href=&quot;http://adam.herokuapp.com/past/2011/5/9/applying_the_unix_process_model_to_web_apps/&quot;&gt;unix process model for running service daemons&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ix-disposability&quot;&gt;IX. Disposability&lt;/h2&gt;
&lt;p&gt;The twelve-factor app’s processes must be disposable and destroyable, meaning they must be started or stopped at a moment’s notice … the more temporary the better. This facilitates fast elastic scaling, rapid deployment of code or config changes, and robustness of production deploys.&lt;/p&gt;

&lt;h2 id=&quot;x-devprod-parity&quot;&gt;X. Dev/prod parity&lt;/h2&gt;
&lt;p&gt;The twelve-factor app is designed for continuous deployment by making the gap between development and production as small as possible… make the time gap small … make the personnel gap small … make the tools gap small.&lt;/p&gt;

&lt;h2 id=&quot;xi-logs&quot;&gt;XI. Logs&lt;/h2&gt;
&lt;p&gt;A twelve-factor app never concerns itself with routing or storage of its output stream. It should not attempt to write to or manage logfiles – it must assume that logging will tend to attract malicious use.&lt;/p&gt;

&lt;h2 id=&quot;xii-admin-processes&quot;&gt;XII. Admin processes&lt;/h2&gt;
&lt;p&gt;Run admin/management tasks as one-off processes. One-off admin processes should be run in an identical environment as the regular long-running processes of the app. They run against a release, using the same codebase and config as any process run against that release. Admin code must ship with application code to avoid synchronization issues.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Jan 2017 11:00:00 -0600</pubDate>
        <link>/philosophy/2017/01/01/Do-12-Factor-Apps-Still-Matter.html</link>
        <guid isPermaLink="true">/philosophy/2017/01/01/Do-12-Factor-Apps-Still-Matter.html</guid>
        
        
        <category>Philosophy</category>
        
      </item>
    
      <item>
        <title>The state of the economic data industry</title>
        <description>&lt;p&gt;Not all data are created equally.  Some data really matter because they are the artifacts of serious choice by people with scarce resources to allocate.&lt;/p&gt;

&lt;p&gt;Data that is an artifact of a REAL economic transaction is actually really valuable, by comparison … if we consider things like a search engine requests or some sort of social media inference or psueudo-meaningful quasi-real transaction, eg. a “Like” on FB or LinkedIn or upvote on StackExchange, with sort of just data about potential interests or preferences or even boredom.  Things change significantly when real money gets spent.&lt;/p&gt;

&lt;p&gt;One example of a company nudging in the more meaningful niche in this realm is &lt;a href=&quot;https://metamarkets.com/blog/&quot;&gt;MetaMarkets&lt;/a&gt; which specializes in programmatic ad [and ad buy data, analytics and tracking data, etc] using its own technology stack that is built end-to-end for speed, flexibility, and the power to handle huge volumes of programmatic ad data. Programmatic advertising dwarfs Wall Street in data volume, growth, and complexity. It is arguably one of the most complex marketplaces ever created and it’s still being created everyday.&lt;/p&gt;

&lt;p&gt;Another company with a more active strategy to acquire more valuable data is &lt;a href=&quot;https://www.premise.com/&quot;&gt;Premise&lt;/a&gt;, an economic data collection and aggregation company, which just received &lt;a href=&quot;http://techcrunch.com/2015/09/24/premise-raises-50-million-to-outsource-the-collection-of-economic-data/&quot;&gt;$50 million in series C funding&lt;/a&gt;. Premise is a SaaS provider that uses 25,000 “contributors” in 32 countries and tasks them with photographing and otherwise documenting economic data in order to provide customers like the World Bank with highly valuable information. Premise has boots on the ground who will show up at grocery stores and send back information that Premise’s data analysts then parse.&lt;/p&gt;

&lt;p&gt;There are other opportunities in economic data being created every second; for example, we can think about rapidly emerging communities like crowdfunding or bitcoin that did not exist a decade ago OR we can think about how &lt;a href=&quot;http://www.programmableweb.com/news/5-ways-to-increase-api-adoption/analysis/2015/06/12&quot;&gt;data and data APIs have become the means for building communities and expanding networks&lt;/a&gt;.  Markets that more free than ever is particularly interesting and that is the realm that Salebarn is exploring … things like peer-to-peer distributed exchanges, smart contracts and revolutions that continue to break out in freelancing, remote working, microwork, app hubs and developments like &lt;a href=&quot;https://medium.com/college-cryptocurrency-network/reposium-dco-the-future-of-wikipedia-4be080cfa027&quot;&gt;reposium&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Jun 2016 12:00:00 -0500</pubDate>
        <link>/data/2016/06/25/MetaMarkets-Economic-Data.html</link>
        <guid isPermaLink="true">/data/2016/06/25/MetaMarkets-Economic-Data.html</guid>
        
        
        <category>Data</category>
        
      </item>
    
      <item>
        <title>Conway&#39;s Law and Why GitHub Matters</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_law&quot;&gt;Conway’s Law&lt;/a&gt; tells us that &lt;em&gt;organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations.&lt;/em&gt;  This means that the political organizations and Parties that have been trying to elect political leaders, ie the Democrats, the GOP, the third Party efforts, are all going to fail at changing government because their organizations are inherently corrupted by old politicos, thoroughly calcified and cannot do anything other than produce the same old crap that they always have.&lt;/p&gt;

&lt;p&gt;Hopefully you already an appreciation for the open source distributed version control system &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; and the &lt;a href=&quot;http://aosabook.org/en/git.html&quot;&gt;history of and rationale behind the development of Git&lt;/a&gt; … and maybe you understand a bit of &lt;a href=&quot;https://www.quora.com/What-makes-GitHub-such-an-important-and-strategic-web-property&quot;&gt;what the GitHub social coding ecosystem is about&lt;/a&gt; or how &lt;a href=&quot;http://www.wired.com/2015/03/github-conquered-google-microsoft-everyone-else/&quot;&gt;GitHub conquered Microsoft and Google and everyone else&lt;/a&gt; and what &lt;a href=&quot;https://help.github.com/articles/be-social/&quot;&gt;being social&lt;/a&gt; and then &lt;a href=&quot;https://developer.github.com/program/&quot;&gt;extending Github platform&lt;/a&gt; is about.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.wired.com/2015/03/github-conquered-google-microsoft-everyone-else/&quot;&gt;Open source socially-produced code has formally now arrived&lt;/a&gt; because the most savvy DevOps engineers thoroughly understand why collaborating on an open source team is not only fun and that the collaborative effort also “moves the ball ahead” for everyone … there’s a private intrinsic reward, but with the &lt;a href=&quot;https://help.github.com/categories/graphs-and-contributions/&quot;&gt;GitHub graphs and contributions metrics&lt;/a&gt; there is also the direct professional recognition [and possible financial reward] that comes from the public trail of commits, pull requests, gists, issues, comments, etc.&lt;/p&gt;

&lt;p&gt;Github is a means to an end, but the MEANS to that end are critically important.  It’s important to reiterate what &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_law&quot;&gt;Conway’s Law&lt;/a&gt; tells us about &lt;em&gt;organizations which design systems … being constrained to produce designs which are copies of the communication structures of these organizations.&lt;/em&gt;  A solid implementation of market-based technologies that furnish more options and greater choice and transcend government … but that effort is, FIRST and FOREMOST, about creating the technologies that enable a leaner, smaller, saner, less coercive, more reliable government.  That is exactly what is happening right now through open source communication architectures and social production workflows of the type that were designed and built into Git and the GitHub platform and are &lt;a href=&quot;https://developer.github.com/program/&quot;&gt;constantly being extended and improved&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 03:30:00 -0500</pubDate>
        <link>/technology/2015/09/09/Why-GitHub-Matters.html</link>
        <guid isPermaLink="true">/technology/2015/09/09/Why-GitHub-Matters.html</guid>
        
        
        <category>Technology</category>
        
      </item>
    
  </channel>
</rss>
